/* Archivo: LAB_5.S
   Dispositivo: PIC16F887
   Autor: Luis Antunez
   Compilador: pic-as (v2.30), MPLABX V5.40
     
   Programa: "Contador binario de 8bits en puerto A y displays multiplexados para que muestren
	    unidades, decenas y centenas."
   Hardware: "Leds, pushbuttons, displays, resistencias."
     
   Cread: 19/02/2021
   Ultima modificación: 24/02/2023 
 */

PROCESSOR 16F887
#include <xc.inc>

;configuration word 1
 CONFIG FOSC=INTRC_NOCLKOUT // Oscillador interno salidas
 CONFIG WDTE = OFF // WDT disabled (reinicio repetitivo del pic)
 CONFIG PWRTE=OFF // PWRT enabled (espera de 72ms al iniciar)
 CONFIG MCLRE=OFF // El ping de MCLR se utiliza como I/o
 CONFIG CP=OFF	// Sin proteccion de codigo
 CONFIG CPD =OFF  // Sin proteccion de datos
 
 CONFIG BOREN=OFF // Sin reinicio cuando el voltaje de alimentacion baja de 4v
 CONFIG IESO=OFF // Reinicio sin cambio de reloj de interno a externo
 CONFIG FCMEN=OFF // Cambio de reloj externo a interno en caso de fallo
 CONFIG LVP=OFF // Programacion en bajo voltaje permitida
 
 ;configuration word 2
 CONFIG WRT=OFF // Proteccion de autoescritura por el programa desactivada
 CONFIG BOR4V=BOR40V // Reinicio abajo de 4V, (BOR21V=2.1V)
 
 PSECT udata_shr
W_TEMP: DS 1; 1 byte reservado
STATUS_TEMP: DS 1; 1 byte reservado
    
 PSECT udata_bank0 ;common memory
contador:	DS 1; 1 byte
cont:	DS 1
    
display:	DS 3
nibble:	DS 2
banderas:	DS 1
    
unidades:	DS 1
decenas:	DS 1
centenas:	DS 1
;-------------Vector reset------------------------------------
PSECT resVect, Class=CODE, abs, delta=2
ORG 00h ;    posicion 000h para el reset
    
resetVec:
    PAGESEL main
    goto main
;-------------------------------------------------------------
PSECT code, delta=2, abs
    ORG 100h ; posición para el coódigo
 
tabla:			; Tabla para los displays
    CLRF PCLATH
    BSF  PCLATH, 0
    ANDLW 0X0F
    ADDWF PCL
    retlw 00111111B ;0
    retlw 00000110B ;1
    retlw 01011011B ;2
    retlw 01001111B ;3
    retlw 01100110B ;4
    retlw 01101101B ;5
    retlw 01111101B ;6
    retlw 00000111B ;7
    retlw 01111111B ;8
    retlw 01101111B ;9
    retlw 01110111B ;A
    retlw 01111100B ;B
    retlw 00111001B ;C
    retlw 01011110B ;D
    retlw 01111001B ;E
    retlw 01110001B ;F
;---------------------------------------------------------------    
re_timer0   MACRO
    BANKSEL TMR0    // llamar al banco 0
    MOVLW 246 ; valor para incrementos de 100ms
    MOVWF TMR0	// Cargar el valor para los incrementos al timer0
    BCF INTCON,2    ; Limpiar bandera de overflow del timer0
    endm
;------------Vector de interrupcion-----------------------------
ORG 04h ; posicion para las interrupciones
    
push:
    movwf W_TEMP
    swapf STATUS, W
    movwf STATUS_TEMP
isr:
    BTFSC RBIF	    ; interrupcion del los pushbuttons
    call inter_IOCB	    ; sub rutina de interrupcion para los pushbuttons
    BTFSC T0IF	    ; interrupcion del timer0
    call inter_timer0   ; sub rutina de interrupcion del timer0
pop:
    swapf STATUS_TEMP, W
    movwf STATUS
    swapf W_TEMP, F
    swapf W_TEMP, W
    
    retfie
;-------------Subrutina de interrupcion-pulsador----------
    
inter_IOCB:
    banksel PORTB   ; Selecion del banco del Pueto B
    btfss   PORTB, 0  ; Revisar si el pin 0 del puerto B es 1
    incf    PORTA	    ; Si no es 1 incrementa el puerto A
    
    btfss   PORTB,1   ; Revisar si el pin 1 del puerto B es 1
    decf    PORTA	    ; Si no es 1 se decrementa el puerto A
    bcf	    RBIF	    ; Se limpia la bandera de interrupciones
    return
;-------------------Subrutina de interrupcion timer0----------------------------------------   
    
inter_timer0:
    call toggle_disp ; Se llama al asubrutina para escorger el display
    re_timer0	 ; Reinicio del timer0
    return
    
toggle_disp:
    bcf	    PORTD,0   
    bcf	    PORTD,1
    bcf	    PORTD,2   ; Pines del 0-1 en cero
    
    btfsc   banderas,1  ; revisa la bandera 1 si esta en cero
    goto    display_3   ; Si no esta en o va al tercer display
    btfsc   banderas,0  ; Verificamos si la bandera esta
    goto    display_1
    goto    display_2
    return
    
display_1: ;centenas
    movf      display, W	; Mueve el display a W
    movwf     PORTC		; Mueve el contenido de W al PORTC
    bsf	    PORTD,0	; Habilita el ping 0 del PORTC
    bcf	    banderas,0	
    bsf	    banderas,1
    return
display_2:; decenas
    movf    display+1, W	; Mueve el display+1 a W
    movwf   PORTC		; Movemos el contenido de W a PORTC
    bsf	  PORTD,1		; Habilita el ping 1 del PORTD
    bsf	  banderas,0
    bcf	  banderas,1
    return
display_3:  ; unidades
    movf      display+2, W	; Mueve el display+2 a W
    movwf	    PORTC		; Movemos el contenido de W a PORTC
    bsf	    PORTD,2	; Habilita el ping 2 del PORTD
    bcf	    banderas,0
    bcf	    banderas,1
    return

 ;----------Configuracion--------------------------------------
main:
    call config_puertos ; Configuracion de puertos
    call config_reloj	; Configuracion del reloj 
    call config_IOCRB	; Congiguracion de las interrupciones
    call config_timer0	; Configuracion del timer0
    call config_inter	; Activar las interrupciones
    
    banksel PORTA 
    clrf    banderas
;--------------------------------------------------------------
    
loop:
    
    movf    PORTA,W	    ; Mover el valor de PORTA a W
    movwf   cont	    ; Mover el valor en W a la variable cont
    call    prep_disp   ; Llamar a a la sub rutina para preparar los displays
    
	  ;Limpiar unidades centenas y decenas
    clrf    decenas
    clrf    centenas
    clrf    unidades
	  ;Funciones para asiganar a cada display una variable (unidad, decenas y centenas)
    
    call    conv_cen    ; centenas 
    call    conv_dec    ; decimal
    call    conv_uni    ; unidades
    goto    loop
    

prep_disp:
    movf    decenas, w	;mueve la variable decenas a w
    call    tabla		;llamamos a la tabla del display
    movwf   display+1	;movemos el valor de W al display asignado con displa+1
    
    movf    centenas, w	;mueve la variable centenas a w
    call    tabla		;llamamos a la tabla del display
    movwf   display		;movemos el valor de W al display asignado con displa
    
    movf    unidades, w	;mueve la variable centenas a w
    call    tabla		;llamamos a la tabla del display
    movwf   display+2	;movemos el valor de W al display asignado con displa+2
    return
    
    
conv_dec:
    movlw   10	    ;movemos el valor de 10 a W
    subwf   cont,F	    ;restamos W con la variable cont
    incf    decenas	    ;Incrementamos la variable decenas
    btfsc   STATUS,0    ;Verificamos si hay borrow
    goto    $-4	    ;En caso que no, se vuelve a iniciar la rutina
    decf    decenas	    ;En caso que si, se decrementa la variable decentas
    movlw   10	    ; Se vuelve cargar el valor de 10 a A
    addwf   cont,F	    ; Se efectua la suma de W con la variable cont
    return
    
conv_cen:	  ;Se repite el mismo proceso que la sub rutina anterior con la diferencia que se carga un valor 100
    movlw   100
    subwf   cont,F
    incf    centenas
    btfsc   STATUS,0
    goto    $-4
    decf    centenas
    movlw   100
    addwf   cont,F
    return 
    
conv_uni:	  ; Se repite el mismo proceso que la sub rutina anterior con la diferencia que se carga un valor 1
    movlw   1
    subwf   cont,F
    incf    unidades
    btfsc   STATUS,0
    goto    $-4
    decf    unidades
    movlw   1
    addwf   cont,F
    return
    
;--------------------Seccion de configuracion general-----------------------    
config_IOCRB:
    banksel TRISA
    BSF IOCB,0
    BSF IOCB, 1	; Configuracion del los bits 0 y 1 como interrupciones on-change
    
    banksel PORTA
    movf PORTB, W
    BCF RBIF
    
    return
    
config_puertos:
    banksel ANSEL; banco 11
    clrf	  ANSEL
    clrf	  ANSELH  ; Declaramos el uso de pines digitales
    
    banksel TRISA ; banco 01
    clrf	  TRISA	 ; D
    clrf	  TRISC
    clrf	  TRISD
    
    bsf TRISB,0
    bsf TRISB,1 ;configuracion de entradas en el PORTB
    
    bcf OPTION_REG, 7 ; PULL-UPS
    bsf WPUB0	;pull-ups internos 1: enabled
    bsf WPUB1
        
    banksel PORTA ; banco 00
    clrf PORTA ; reseteo del puerto A
    clrf PORTC  
    CLRF PORTD
    
    return   
    
config_inter:
    BSF RBIE
    BCF RBIF
    
    BSF T0IE
    BCF T0IF
    BSF GIE; intcon
    return 

config_reloj:
    banksel OSCCON ; oscilador en 4MHz
    bsf	    IRCF2
    bcf	    IRCF1
    bcf	    IRCF0
    bsf	    SCS
    return
    
config_timer0:
    banksel OPTION_REG ; ubicacion del timer0 y configuracion a temporizador
   
    BCF T0CS
    BCF PSA
    
    BSF PS2
    BSF PS1
    BSF PS0	    ; prescaler 256
    
    banksel PORTA; cambio al banco 0
    re_timer0 ; Llamamos a la sub rutina de reseteo del timer0
    return 
END
    
